q()
rnorm(100)
mean(abs(rnorm(100)))
rnorm(10)
mean(Nile)
Nile
library(fpp)
install.packages("forecast","/home/RPackages")
install.packages("devtools")
library(devtools)
install_github("robjhyndman/MEFM-package")
library(MEFM)
help
help(package = MEFM)
install.packages(data.table)
install.packages("data.table"")
install.packages("data.table")
install.packages("data.table")
install.packages("r.benchmark")
install.packages("benchmark")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("benchmark", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(doBy)
library(plyr)
library(dplyr)
library(sqldf)
library(data.table)
library(rbenchmark)
install.pakages("rbenchmark")
install.packages("rbenchmark")
library("rbenchmark", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(doBy)
library(plyr)
library(dplyr)
library(sqldf)
library(data.table)
library(rbenchmark)
install.packages("doBy")
install.packages("sqldf")
library(doBy)
library(plyr)
library(dplyr)
library(sqldf)
library(data.table)
library(rbenchmark)
g <- 10
df <- data.frame(age=rchisq(100000,g),group=factor(sample(1:g,100000,rep=T)))
dt <- data.table(df)
setkey(dt,group)
benchmark(replications=nl,
sapply=with(df, sapply(split(age, group),function(x) c(mean=mean(x),sd=sd(x)))),
tapply=with(df, tapply(age, group, function(x) c(mean(x), sd(x)))),
aggregate1=aggregate(age ~ group, data=df, FUN=function(x)c(mean(x),sd(x))),
aggregate2=aggregate(df$age, by=list(df$group), FUN=function(x)c(mean(x),sd(x))),
doBy=summaryBy(age~group, data=df, FUN=c(mean, sd)),
plyr1=ddply(df,~group,summarise,mean=mean(age),sd=sd(age)),
plyr2=ddply(dt,~group,summarise,mean=mean(age),sd=sd(age)),
dplyr=df %>% group_by(group) %>% do(summarise(., mean=mean(age),sd=sd(age))),
data.table=dt[,list(mean=mean(age),sd=sd(age)),by=group],
columns=c('test', 'elapsed', 'relative'))
nl <- 10
benchmark(replications=nl,
sapply=with(df, sapply(split(age, group),function(x) c(mean=mean(x),sd=sd(x)))),
tapply=with(df, tapply(age, group, function(x) c(mean(x), sd(x)))),
aggregate1=aggregate(age ~ group, data=df, FUN=function(x)c(mean(x),sd(x))),
aggregate2=aggregate(df$age, by=list(df$group), FUN=function(x)c(mean(x),sd(x))),
doBy=summaryBy(age~group, data=df, FUN=c(mean, sd)),
plyr1=ddply(df,~group,summarise,mean=mean(age),sd=sd(age)),
plyr2=ddply(dt,~group,summarise,mean=mean(age),sd=sd(age)),
dplyr=df %>% group_by(group) %>% do(summarise(., mean=mean(age),sd=sd(age))),
data.table=dt[,list(mean=mean(age),sd=sd(age)),by=group],
columns=c('test', 'elapsed', 'relative'))
rm(g, nl)
rm(df, dt)
DF = data.frame(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DT = data.table(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DF
DT
DF$x[which(DF$x=="a")]
DT$x[which(DT$x=="a")]
identical(dim(DT),dim(DF)) # TRUE
identical(DF$a, DT$a)      # TRUE
is.list(DF)                # TRUE
is.list(DT)                # TRUE
is.data.frame(DT)          # TRUE
tables()
DF[2,]
DT[2]                      # 2nd row
names(DF)
names(DT)
DF[,"v"]
DT[,v]                     # v column (as vector)
DF$v
DT$v
DT[,list(v)]               # v column (as data.table)
sum(DF[2:3,"v"])
sum(DT[2:3]$v)
DT[2:3,sum(v)]             # sum(v) over rows 2 and 3
cat(paste(DF[2:5,"v"],"\n"))
DT[2:5,v]
cat(DT[2:5,paste(v,"\n")])        # just for j's side effect
DF[c(FALSE,TRUE),]
DT[c(FALSE,TRUE)]          # even rows (usual recycling)
as.data.frame(DF[,2])
DT[,2,with=FALSE]          # 2nd column
colNum = 2
DT[,colNum,with=FALSE]     # same
rm(colNum)
tables()
setkey(DT,x)               # set a 1-column key. No quotes, for convenience.
setkeyv(DT,"x")            # same (v in setkeyv stands for vector)
v="x"
setkeyv(DT,v)              # same
# key(DT)<-"x"             # copies whole table, please use set* functions instead
tables()
rm(v)
#-----------------------------------------------------------------------------------------------------------------------------------
DF[DF$x=="a",]
subset(DF, x=="a", select = c(x,y,v))
DT["a"]                    # binary search (fast)
DT[x=="a"]                 # vector scan (slow)
#-----------------------------------------------------------------------------------------------------------------------------------
with(DF,by(v,x,sum))
with(DF, tapply(v,x,sum))
XDF = data.frame(x=c("b","c"),foo=c(4,2));XDF
XDT = data.table(c("b","c"),foo=c(4,2));XDT
XDF<-merge(DF,XDF,by="x")
XDF
all_cons <- dbListConnections(MySQL())
for(con in all_cons)
dbDisconnect(con)
rm(all_cons,con)
library(shiny)
setwd("~/4450")
runApp("App")
runApp("App")
runApp("App")
runApp("App")
all_cons <- dbListConnections(MySQL())
for(con in all_cons)
dbDisconnect(con)
rm(all_cons,con)
runApp("App")
